# Базовый класс для животных
class Animal:
    def __init__(self, name):
        """
        Инициализируем животное с атрибутами:
        - name: имя животного (индивидуальное для каждого объекта)
        - alive: животное живо или мертво (по умолчанию True)
        - fed: накормлено животное или нет (по умолчанию False)
        """
        self.name = name
        self.alive = True  # Живое животное по умолчанию
        self.fed = False  # Накормлено - нет

    def eat(self, food):
        """
        Метод для того, чтобы животное могло съесть пищу (растение).
        Этот метод будет переопределен в подклассах.
        """
        pass


# Базовый класс для растений
class Plant:
    def __init__(self, name):
        """
        Инициализируем растение с атрибутами:
        - name: имя растения (индивидуальное для каждого объекта)
        - edible: съедобность растения (по умолчанию False)
        """
        self.name = name
        self.edible = False  # Несъедобное растение по умолчанию


# Класс Млекопитающее (наследник Animal)
class Mammal(Animal):
    def eat(self, food):
        """
        Метод eat позволяет млекопитающему съесть растение.
        Если растение съедобное, животное становится накормленным (fed=True).
        Если растение несъедобное, животное умирает (alive=False).
        """
        if isinstance(food, Plant):  # Проверка, что переданный объект - растение
            if food.edible:
                self.fed = True  # Животное становится сытым
                print(f"{self.name} съел {food.name}")
            else:
                self.alive = False  # Животное умирает
                print(f"{self.name} не стал есть {food.name} и погиб")
        else:
            print(f"{self.name} не может есть это!")  # Если передано что-то не растение


# Класс Хищник (наследник Animal)
class Predator(Animal):
    def eat(self, food):
        """
        Метод eat позволяет хищнику съесть растение.
        Логика идентична классу Mammal.
        """
        if isinstance(food, Plant):  # Проверка, что переданный объект - растение
            if food.edible:
                self.fed = True  # Хищник становится сытым
                print(f"{self.name} съел {food.name}")
            else:
                self.alive = False  # Хищник умирает
                print(f"{self.name} не стал есть {food.name} и погиб")
        else:
            print(f"{self.name} не может есть это!")  # Если передано что-то не растение


# Класс Цветок (наследник Plant)
class Flower(Plant):
    def __init__(self, name):
        """
        Цветы не съедобны, поэтому edible остается False.
        """
        super().__init__(name)  # Наследуем атрибуты из Plant


# Класс Фрукт (наследник Plant)
class Fruit(Plant):
    def __init__(self, name):
        """
        Переопределяем атрибут edible, так как фрукты съедобны.
        """
        super().__init__(name)  # Наследуем атрибуты из Plant
        self.edible = True  # Фрукты съедобные


# Тестирование программы

# Создаем объекты классов животных и растений
a1 = Predator('Волк с Уолл-Стрит')  # Создаем хищника
a2 = Mammal('Хатико')  # Создаем млекопитающее
p1 = Flower('Цветик семицветик')  # Создаем несъедобный цветок
p2 = Fruit('Заводной апельсин')  # Создаем съедобный фрукт

# Вывод имени животных и растений
print(a1.name)  # Вывод имени хищника: Волк с Уолл-Стрит
print(p1.name)  # Вывод имени цветка: Цветик семицветик

# Проверка состояния перед тем, как животные попробуют поесть
print(a1.alive)  # Хищник жив (True)
print(a2.fed)  # Млекопитающее голодно (False)

# Попытка хищника съесть несъедобный цветок
a1.eat(p1)  # Волк с Уолл-Стрит не стал есть Цветик семицветик и погиб

# Попытка млекопитающего съесть съедобный фрукт
a2.eat(p2)  # Хатико съел Заводной апельсин

# Проверка состояния после еды
print(a1.alive)  # Хищник умер (False)
print(a2.fed)  # Млекопитающее накормлено (True)
